cat("done\n")
}
DBI::dbDisconnect(con)
if (auto.assign)
return(Symbols)
return(fr)
}
TEST_Stock_Data = getSymbols.SQLite("FutureTByT",src="SQLite",auto.assign=FALSE,
db.fields = c("date", "price"),
user=NA, password=NA, dbname=TAIFEX_DB_FILE)
open('/Users/benjamin/Github/BeATradeR/c3h3/quantmod_101/downloadTaifex.R')
?source
TAIFEX_RPT_DIR = Sys.getenv(x = "RPT_DIR", unset = "data/TAIFEX/rpt", names = NA)
TAIFEX_ZIP_DIR = Sys.getenv(x = "ZIP_DIR", unset = "data/TAIFEX/zip", names = NA)
TAIFEX_DB_FILE = Sys.getenv(x = "DB_PATH", unset = "data/TAIFEX/TaifexDaily.sqlite", names = NA)
TAIFEX_F_TbyT_ZIPs_URL = "http://www.taifex.com.tw/eng/eng3/eng3_1_3.asp"
TAIFEX_FC_TbyT_ZIPs_URL = "http://www.taifex.com.tw/eng/eng3/eng3_1_5.asp"
dir.create(TAIFEX_RPT_DIR,recursive = T)
dir.create(TAIFEX_ZIP_DIR,recursive = T)
library(quantmod)
library(httr)
library(rvest)
library(stringr)
library(RSQLite)
res = GET(TAIFEX_F_TbyT_ZIPs_URL)
downloadUrls = html(res) %>% html_nodes(".table_c input") %>% html_attr("onclick")
downloadUrls = sapply(downloadUrls,function(xx) str_replace_all(xx,"window.open[(]'../..","http://www.taifex.com.tw"))
downloadUrls = sapply(downloadUrls,function(xx) str_replace_all(xx,"'[)]",""))
names(downloadUrls) = NULL
downloadUrls = downloadUrls[grep("DataInformation.doc",downloadUrls,invert = T)]
downloadFilenames = sapply(downloadUrls, function(url){
xx = unlist(strsplit(url,"/"))
xx[length(xx)]
})
names(downloadFilenames) = NULL
dnFilesDF = data.frame(url=downloadUrls,dest=downloadFilenames,stringsAsFactors = F)
dnFilesDF$dest = sprintf("./%s/%s",TAIFEX_ZIP_DIR,dnFilesDF$dest)
rptFiles = apply(dnFilesDF,1,function(xx){
do.call(download.file,as.list(xx))
unzip(xx[2], exdir = sprintf("./%s/",TAIFEX_RPT_DIR))
})
rptFiles
for (rptF in rptFiles[1]){
dataDate = paste(unlist(strsplit(str_replace(str_replace(rptF,sprintf("./%s//Daily_",TAIFEX_RPT_DIR),""),".rpt",""),split = "_")),collapse = "")
parsingRPT = F
sqliteDrv <- dbDriver("SQLite")
conn <- dbConnect(sqliteDrv,TAIFEX_DB_FILE)
if (!"FutureTByT" %in% dbListTables(conn)){
parsingRPT = T
}else{
if (dbGetQuery(conn,sprintf("select count(*) from FutureTByT where date = %s", dataDate))[1] == 0){
parsingRPT = T
}
}
if (parsingRPT){
TaifexFutureTByT_df = read.csv(rptF, na.strings = "-",stringsAsFactors=FALSE)
TaifexFutureTByT_df$Time.of.Trades = sapply(TaifexFutureTByT_df$Time.of.Trades,function(time){
ifelse(str_length(time) < 6,sprintf("0%s",time),time)
})
TaifexFutureTByT_df$Time = apply(TaifexFutureTByT_df,1,function(row){
str_replace_all(paste(row[1],row[4],collapse = "")," ","")
})
TaifexFutureTByT_df$Time = strptime(TaifexFutureTByT_df$Time,"%Y%m%d%H%M%S",tz = "CST")
filterd_idx = which(TaifexFutureTByT_df$Date!="\032")
TaifexFutureTByT_df = TaifexFutureTByT_df[filterd_idx, ]
#   dataDate = unique(TaifexFutureTByT_df$Date)
rowData = data.frame(date = dataDate,
time = TaifexFutureTByT_df$Time,
price = TaifexFutureTByT_df$Trade.Price,
pcode = str_replace_all(TaifexFutureTByT_df$Product.Code," ",""),
exMW = str_replace_all(TaifexFutureTByT_df$Contract.Month.Week.," ",""),
volume=TaifexFutureTByT_df$Volume.Buy.Sell./2,
pNM = TaifexFutureTByT_df$Price.for.Nearer.Delivery.Month.Contract,
pFM = TaifexFutureTByT_df$Price.for.Nearer.Delivery.Month.Contract,
OCA = TaifexFutureTByT_df$Opening.Call.Auction,
stringsAsFactors = F)
dbWriteTable(conn, "FutureTByT", rowData,row.names=FALSE,append=TRUE)
}
dbDisconnect(conn)
print(sprintf("Finished Convert Data from %s into DB", rptF))
}
TEST_Stock_Data = getSymbols.SQLite("FutureTByT",src="SQLite",auto.assign=FALSE,
db.fields = c("date", "price"),
user=NA, password=NA, dbname=TAIFEX_DB_FILE)
TEST_Stock_Data
dbDisconnect(conn)
dbDisconnect(conn)
dbDisconnect(conn)
dbDisconnect(conn)
TEST_Stock_Data = getSymbols.SQLite("FutureTByT",src="SQLite",auto.assign=FALSE,
db.fields = c("date", "price"),
user=NA, password=NA, dbname=TAIFEX_DB_FILE)
rm(list="getSymbols.SQLite")
library(quantmod)
TEST_Stock_Data = getSymbols.SQLite("FutureTByT",src="SQLite",auto.assign=FALSE,
db.fields = c("date", "price"),
user=NA, password=NA, dbname=TAIFEX_DB_FILE)
head(TEST_Stock_Data)
TAIFEX_DB_FILE
help(Sys.getenv)
str(TAIFEX_DB_FILE)
TAIFEX_DB_FILE = Sys.getenv(unset = "data/TAIFEX/TaifexDaily.sqlite")
str(TAIFEX_DB_FILE)
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(unset = "data/TAIFEX/TaifexDaily.sqlite",names=NA)
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(x="DB_PATH",unset = "data/TAIFEX/TaifexDaily.sqlite",names=NA)
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(x="DB_PATH",unset = "data/TAIFEX/TaifexDaily.sqlite")
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(x="PATH",unset = "data/TAIFEX/TaifexDaily.sqlite")
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(x="DB",unset = "data/TAIFEX/TaifexDaily.sqlite")
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(x="DB_PATH",unset = "data/TAIFEX/TaifexDaily.sqlite")
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(x="database",unset = "data/TAIFEX/TaifexDaily.sqlite")
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(x="DB_path",unset = "data/TAIFEX/TaifexDaily.sqlite")
TAIFEX_DB_FILE
TAIFEX_DB_FILE = Sys.getenv(x = "DB_PATH", unset = "TaifexDaily.sqlite", names = NA)
TAIFEX_DB_FILE
library(quantmod)
getSymbols('2023.TW')
x=getSymbols('2023.TW',auto.assign = FALSE)
chartSeries(x)
library(httr)
library(XML)
res= GET("http://www.pizzahut.com.tw/place/?c=c")
cook=set_cookies(FJUDQRY01_1="16/1/0/0/0/0//0////////////%u88AB%u544A%u90B1%u6BC5//%u88AB%u544A%u90B1%u6BC5///////%u88AB%u544A%u90B1%u6BC5")
header = add_headers("Referer"="http://jirs.judicial.gov.tw/FJUD/FJUDQRY02_1.aspx")
res2 =GET("http://jirs.judicial.gov.tw/FJUD/FJUDQRY03_1.aspx?id=1&v_court=TPS+%E6%9C%80%E9%AB%98%E6%B3%95%E9%99%A2&v_sys=M&jud_year=101&jud_case=%E5%8F%B0%E4%B8%8A&jud_no=6000&jud_no_end=&jud_title=&keyword=&sdate=19110101&edate=99991231&page=&searchkw=&jmain=&cw=1",cook,header)
content(res2)
x=content(res2)
class(x)
as.character(x)
x=content(res2,type = "text")
class(x)
grep('被告',x)
grep('議長',x)
install.packages("stringr")
library(stringr)
help(package="stringr")
str_extract('議長',x)
str_extract(x,'議長')
str_extract(x,'*議長')
str_extract(x,'\\W*議長')
str_extract(x,'\\W*上訴駁回')
help("strsplit")
strsplit(x,'上訴駁回')
ystrsplit(x,'上訴駁回')
y=strsplit(x,'上訴駁回')
str(y)
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
x
strsplit(x, "e")
str_match(x,'上訴駁回')
str_match_all(x,'上訴駁回')
str_match(x,'上訴駁回')
str(x)
x=content(res2,type = "text")
library(httr)
library(XML)
library(stringr)
x=content(res2,type = "text")
str_match(x,'上訴駁回')
str_match(x,"上訴駁回")
help("URLencode")
str_match(x,URLencode('上訴駁回'))
str_match(x,'www.judicial')
str_match(x,iconv('上訴駁回','big5','utf8'))
str_match(x,iconv('上訴駁回','utf8','big5'))
iconv('上訴駁回','big5','utf8')
iconv('上訴駁回','utf8','big5')
iconv(x,'utf8','big5')
iconv(x,'big5','utf8')
x
x=content(res2,type = "text")
x
x=content(res2,type = "text",encoding = 'utf8')
x
str_extract(x,'\\W*上訴駁回')
res2 =GET("http://jirs.judicial.gov.tw/FJUD/FJUDQRY03_1.aspx?id=1&v_court=TPD+%E8%87%BA%E7%81%A3%E8%87%BA%E5%8C%97%E5%9C%B0%E6%96%B9%E6%B3%95%E9%99%A2&v_sys=M&jud_year=&jud_case=&jud_no=&jud_no_end=&jud_title=&keyword=%E8%A2%AB%E5%91%8A%E9%82%B1%E6%AF%85&sdate=&edate=&page=&searchkw=%E8%A2%AB%E5%91%8A%E9%82%B1%E6%AF%85&jmain=&cw=0",cook,header)
x=content(res2,type = "text",encoding = 'utf8')
x
library(quantmod)
getSymbols("^TWII")
x=TWII
date <- as.Date(time(x))
open <- as.vector(Op(x))
high <- as.vector(Hi(x))
low <- as.vector(Lo(x))
close <- as.vector(Cl(x))
xSubset <-data.frame('date'=date,'open'=open,'high'= high,'low'=low,'close'=close)
xSubset$candleLower <- pmin(xSubset$open, xSubset$close)
xSubset$candleMiddle <- NA
xSubset$candleUpper <- pmax(xSubset$open, xSubset$close)
xSubset$fill <- ''
xSubset$fill[xSubset$open < xSubset$close] = 'white'
xSubset$fill[xSubset$fill ==''] = 'red'
g <- ggplot(xSubset, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high))
g <- g + geom_boxplot(stat='identity', aes(group=date, fill=fill))
g <- g + geom_line(aes(x=date, y=ma5),colour='blue')+ geom_line(aes(x=date, y=ma20),colour='orange')
g
library(ggplot2)
g <- ggplot(xSubset, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high))
g <- g + geom_boxplot(stat='identity', aes(group=date, fill=fill))
g <- g + geom_line(aes(x=date, y=ma5),colour='blue')+ geom_line(aes(x=date, y=ma20),colour='orange')
g
g <- ggplot(xSubset, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high))
g <- g + geom_boxplot(stat='identity', aes(group=date, fill=fill))
g
g
head(xSubset)
ggplot(xSubset, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot(stat='identity', aes(group=date, fill=fill))
ggplot(xSubset, aes(x=date)) +geom_boxplot(stat='identity', aes(group=date, fill=fill))
ggplot(xSubset, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot(stat='identity', aes(group=date))
ggplot(xSubset, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot(stat='identity')
head(xSubset)
str(xSubset)
ggplot(xSubset, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot()
help("geom_boxplot")
ggplot(xSubset, aes(x=date, lower=candleLower, middle=(candleLower+candleUpper)/2, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot()
ggplot(xSubset, aes(x=date, lower=candleLower, middle=(candleLower+candleUpper)/2, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot(stat='identity', aes(group=date, fill=fill))
ggplot(head(xSubset,10), aes(x=date, lower=candleLower, middle=(candleLower+candleUpper)/2, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot(stat='identity', aes(group=date, fill=fill))
library(plotly)
g=ggplot(head(xSubset,10), aes(x=date, lower=candleLower, middle=(candleLower+candleUpper)/2, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot(stat='identity', aes(group=date, fill=fill))
plot_ly(g)
g <- g + geom_line(aes(x=date, y=ma5),colour='blue')+ geom_line(aes(x=date, y=ma20),colour='orange')
g
SMA(x,n=20)
xSubset$ma5=SMA(x,n=5)
g <- g + geom_line(aes(x=date, y=ma5),colour='blue')
g
xSubset$ma5
head(xSubset)
xSubset$ma5=SMA(Cl(xSubset),n=5)
head(xSubset)
g
g=ggplot(head(xSubset,10), aes(x=date, lower=candleLower, middle=(candleLower+candleUpper)/2, upper=candleUpper, ymin=low, ymax=high)) +geom_boxplot(stat='identity', aes(group=date, fill=fill))
g <- g + geom_line(aes(x=date, y=ma5),colour='blue')
g
xSubset$ma20 <- SMA(xSubset$close, 20)
xSubset$ma5 <- SMA(xSubset$close, 5)
g <- ggplot(xSubset, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high))
g <- g + geom_boxplot(stat='identity', aes(group=date, fill=fill))
g <- g + geom_line(aes(x=date, y=ma5),colour='blue')+ geom_line(aes(x=date, y=ma20),colour='orange')
g
?`+`
?BBands
library(Quandl)
oil <- Quandl("DOE/RBRTE", type="zoo")
oil
library(quantmod)
help("Quandl")
oil <- Quandl("DOE/RBRTE", type="raw")
head(oil)
getSymbols("^TWII")
TWII[oil$Date]
test=TWII[oil$Date]
test
dim(test)
dim(oil)
dim(TWII)
test=TWII[tail(oil$Date,10)]
test
test=TWII[tail(oil$Date)]
test
tail(oil$Date)
test=TWII[head(oil$Date)]
test
index(TWII)
TWII_date=index(TWII)
class(TWII_date)
oil_date=index(oil)
oil_date
oil <- Quandl("DOE/RBRTE", type="xts")
oil <- Quandl("DOE/RBRTE", type=c("zoo","xts"))
index(oil)
intersect(oil_date,TWII_date)
class(oil_date)
oil_date=index(oil)
intersect(oil_date,TWII_date)
intersect_date=TWII_date[intersect(oil_date,TWII_date)]
intersect_date
intersect_date=TWII_date[intersect(oil_date,TWII_date),]
dim(TWII_date)
length(TWII_date)
intersect_date=oil_date[intersect(oil_date,TWII_date),]
intersect_date=oil_date[intersect(oil_date,TWII_date)]
intersect_date
intersect_date=intersect(oil_date,TWII_date)
intersect_date
help("intersect")
intersect_date=intersect(as.character(oil_date),as.character(TWII_date))
intersect_date
TWII[intersect_date]
oil[intersect_date]
plot(oil)
head(TWII)
getSymbols("^TWII",from="2001")
getSymbols("^TWII",from="2001-01-01")
line(Cl(TWII),col=2)
line(Cl(TWII))
lines(Cl(TWII),col=2)
plot(Cl(TWII))
?biplot
oil["2001::2002"]
mean(oil)
par(new=TRUE)
plot(Cl(TWII))
plot(Cl(TWII))
plot(Cl(TWII),col="red")
plot(Cl(TWII),col=2)
plot(Cl(TWII))
plot(Cl(TWII['2001-01-02::2015-12-28']))
plot(Cl(TWII['2001-01-02::2015-12-28']),main='')
par(new=TRUE)
plot(oil['2001-01-02::2015-12-28'],col=2)
plot(oil['2001-01-02::2015-12-28'],col='red')
help("plot")
plot(Cl(TWII['2001-01-02::2015-12-28']),main='')
par(new=TRUE)
plot(oil['2001-01-02::2015-12-28'],col = "red")
plot(oil['2001-01-02::2015-12-28'],color = "red")
plot(oil['2001-01-02::2015-12-28'],type="l",col="blue")
plot(oil['2001-01-02::2015-12-28'],type="l")
lines(oil['2001-01-02::2015-12-28'],type="l")
lines(oil['2001-01-02::2015-12-28'],type="l",col=2)
plot(Cl(TWII['2001-01-02::2015-12-28']),main='')
par(new=TRUE)
lines(oil['2001-01-02::2015-12-28'],col=2)
plot(oil['2001-01-02::2015-12-28'],col = "red")
plot(oil['2001-01-02::2015-12-28'])
lines(oil['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(TWII['2001-01-02::2015-12-28']),main='')
plot(oil['2001-01-02::2015-12-28'])
lines(oil['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(TWII['2001-01-02::2015-12-28']),main='',xaxt="n",yaxt="n")
plot(oil['2001-01-02::2015-12-28'],,main='',ylab='Europe Brent Crude Oil Spot FOB')
lines(oil['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(TWII['2001-01-02::2015-12-28']),xaxt="n",yaxt="n")
axis(4)
mtext("y2",side=4,line=3)
par(mar=c(5,4,4,5)+.1)
plot(oil['2001-01-02::2015-12-28'],,main='',ylab='Europe Brent Crude Oil Spot FOB')
lines(oil['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(TWII['2001-01-02::2015-12-28']),xaxt="n",yaxt="n")
axis(4)
mtext("TWII",side=4,line=3)
legend("topleft",col=c("red","black"),lty=1,legend=c("Oil Price","TWII"))
getSymbols("^GSPC")
getSymbols("^GSPC",from="2001-01-01")
par(mar=c(5,4,4,5)+.1)
plot(oil['2001-01-02::2015-12-28'],,main='',ylab='Europe Brent Crude Oil Spot FOB')
lines(oil['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(GSPC['2001-01-02::2015-12-28']),xaxt="n",yaxt="n")
axis(4)
mtext("GSPC",side=4,line=3)
legend("topleft",col=c("red","black"),lty=1,legend=c("Oil Price","GSPC"))
getSymbols("^DJI",from="2001-01-01")
par(mar=c(5,4,4,5)+.1)
plot(oil['2001-01-02::2015-12-28'],,main='',ylab='Europe Brent Crude Oil Spot FOB')
lines(oil['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(DJI['2001-01-02::2015-12-28']),xaxt="n",yaxt="n")
axis(4)
mtext("DJI",side=4,line=3)
legend("topleft",col=c("red","black"),lty=1,legend=c("Oil Price","DJI"))
WTI=Quandl("DOE/RWTC",type="xts")
plot(WTI)
par(mar=c(5,4,4,5)+.1)
plot(WTI['2001-01-02::2015-12-28'],,main='',ylab='WTI Crude Oil Spot FOB')
lines(WTI['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(DJI['2001-01-02::2015-12-28']),xaxt="n",yaxt="n")
axis(4)
mtext("DJI",side=4,line=3)
legend("topleft",col=c("red","black"),lty=1,legend=c("WTI Oil Price","DJI"))
TW1303=getSymbols("1303.TW",auto.assign = FALSE)
TW1303=getSymbols("1303.TW",auto.assign = FALSE,from='2001-01-01')
par(mar=c(5,4,4,5)+.1)
plot(WTI['2001-01-02::2015-12-28'],,main='',ylab='WTI Crude Oil Spot FOB')
lines(WTI['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(TW1303['2001-01-02::2015-12-28']),xaxt="n",yaxt="n")
axis(4)
mtext("TW1303",side=4,line=3)
legend("topleft",col=c("red","black"),lty=1,legend=c("WTI Oil Price","TW1303"))
TW2618=getSymbols("2618.TW",auto.assign = FALSE,from='2001-01-01')
par(mar=c(5,4,4,5)+.1)
plot(WTI['2001-01-02::2015-12-28'],,main='',ylab='WTI Crude Oil Spot FOB')
lines(WTI['2001-01-02::2015-12-28'],col=2)
par(new=TRUE)
plot(Cl(TW2618['2001-01-02::2015-12-28']),xaxt="n",yaxt="n")
axis(4)
mtext("TW1303",side=4,line=3)
legend("topleft",col=c("red","black"),lty=1,legend=c("WTI Oil Price","TW1303"))
oda_wti=Quandl("ODA/POILWTI_USD",type='xts')
plot(oda_wti)
tail(oda_wti)
oda_brent=Quandl("ODA/POILBRE_USD",type='xts')
tail(oda_brent)
CL1=Quandl("OFDP/FUTURE_CL1",type='xts')
tail(CL1)
plot(CL1)
plot(Cl(CL1))
class(CL1)
plot(Op(CL1))
plot(CL1[,4])
B1=Quandl("OFDP/FUTURE_B1",type='xts')
lines(B1[,4],col=2)
tail(B1)
cor(oil[intersect_date],TWII[intersect_date])
cor(oil[intersect_date],Cl(TWII[intersect_date]))
plot(TWII[intersect_date])
head(TWII)
head(TWII_date)
tail(oil)
oil_date=as.character(index(oil))
TWII_date=as.character(index(TWII))
intersect_date=intersect(oil_date,TWII_date)
plot(TWII[intersect_date])
plot(oil[intersect_date])
lines(TWII[intersect_date],col='red')
lines(TWII[intersect_date])
TWII[intersect_date]
lines(Cl(TWII[intersect_date]),col=2)
plot(Cl(TWII[intersect_date]),col=2)
par(mar=c(5,4,4,5)+.1)
plot(oil[intersect_date],,main='',ylab='Europe Brent Crude Oil Spot FOB')
lines(oil[intersect_date],col=2)
par(new=TRUE)
plot(Cl(TWII[intersect_date]),xaxt="n",yaxt="n")
axis(4)
mtext("TWII",side=4,line=3)
legend("topleft",col=c("red","black"),lty=1,legend=c("Oil Price","TWII"))
TWII_cor=TWII[tail(intersect_date,240)]
oil_cor=oil[tail(intersect_date,240)]
cor(TWII_cor,oil_cor)
cor(Cl(TWII_cor),oil_cor)
par(mar=c(5,4,4,5)+.1)
plot(oil_cor,,main='',ylab='Europe Brent Crude Oil Spot FOB',type = 'n')
lines(oil_cor,col=2)
par(new=TRUE)
plot(Cl(TWII_cor),xaxt="n",yaxt="n")
axis(4)
mtext("TWII",side=4,line=3)
legend("topleft",col=c("red","black"),lty=1,legend=c("Oil Price","TWII"))
(8149.5-8106.63)*1.382+8106.63
(8080.6+7876.82)*1.382+7876.82
(8080.6-7876.82)*1.382+7876.82
TWII
tail(TWII)
(8149.5-8107)*1.382+8107
(8149.5-8106.63)*1.382-8149.5
(8149.5-8106.63)*1.4-8149.5
(8149.5-8106.63)*1.382-8149.5
(8156+8109)/2
DJI["2015-01"]
DJI["2015-02"]
TWII["2015-02"]
TWII["2014-02"]
TWII["2014-01"]
DJI["2014-01"]
round(0.00075,digits = 4)
round(0.00075,digits = 5)
shiny::runApp('Google 雲端硬碟/Biofibroscore/Tree/fibro')
TW3008=getSymbols("3008.TW",from="2001-01-01",auto.assign = FALSE)
head(TW3008)
library(DBI)
library(RSQLite)
library(Quandl)
oil <- Quandl("DOE/RBRTE", type="xts")
oil
oil <- Quandl("CHRIS/CME_BZ1", type="xts")
oil
tail(oil)
shiny::runApp('Github/portable_shiny/fibro')
shiny::runApp('Github/portable_shiny/fibro')
shiny::runApp('Github/portable_shiny/fibro')
file.info('court_legisletor.R')
ls
ls()
dir()
setwd('Github/portable_shiny/')
dir()
setwd('../../Google 雲端硬碟/Biofibroscore/Tree/')
dir()
x=dir()
grepl('[0-9]*')
grepl('[0-9]*',x)
grepl('[0-9]+',x)
x=x[grepl('[0-9]+',x)]
x
file.info(x)
y=file.info(x)
class(y)
str(y)
order(y$mtime)
z=order(y$mtime)
y[z>1,]
x[z>1,]
x[z>1]
file.remove(x[z>1])
dir()
shiny::runApp('~/Github/portable_shiny/fibro')
